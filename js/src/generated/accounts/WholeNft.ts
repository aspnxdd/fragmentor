/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'
import { FragmentData, fragmentDataBeet } from '../types/FragmentData'

/**
 * Arguments used to create {@link WholeNft}
 * @category Accounts
 * @category generated
 */
export type WholeNftArgs = {
  vault: web3.PublicKey
  originalMint: web3.PublicKey
  fragments: FragmentData[]
}

export const wholeNftDiscriminator = [164, 165, 36, 244, 176, 206, 237, 20]
/**
 * Holds the data for the {@link WholeNft} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class WholeNft implements WholeNftArgs {
  private constructor(
    readonly vault: web3.PublicKey,
    readonly originalMint: web3.PublicKey,
    readonly fragments: FragmentData[]
  ) {}

  /**
   * Creates a {@link WholeNft} instance from the provided args.
   */
  static fromArgs(args: WholeNftArgs) {
    return new WholeNft(args.vault, args.originalMint, args.fragments)
  }

  /**
   * Deserializes the {@link WholeNft} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [WholeNft, number] {
    return WholeNft.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link WholeNft} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<WholeNft> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find WholeNft account at ${address}`)
    }
    return WholeNft.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'CdYdVmD7bDbr2CfSHDhY5HP51ZV8weQsQBQgXiVzAyed'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, wholeNftBeet)
  }

  /**
   * Deserializes the {@link WholeNft} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [WholeNft, number] {
    return wholeNftBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link WholeNft} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return wholeNftBeet.serialize({
      accountDiscriminator: wholeNftDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link WholeNft} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: WholeNftArgs) {
    const instance = WholeNft.fromArgs(args)
    return wholeNftBeet.toFixedFromValue({
      accountDiscriminator: wholeNftDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link WholeNft} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: WholeNftArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      WholeNft.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link WholeNft} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      vault: this.vault.toBase58(),
      originalMint: this.originalMint.toBase58(),
      fragments: this.fragments,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const wholeNftBeet = new beet.FixableBeetStruct<
  WholeNft,
  WholeNftArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['vault', beetSolana.publicKey],
    ['originalMint', beetSolana.publicKey],
    ['fragments', beet.array(fragmentDataBeet)],
  ],
  WholeNft.fromArgs,
  'WholeNft'
)
