/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * @category Instructions
 * @category Unfrag
 * @category generated
 */
export type UnfragInstructionArgs = {
  bumpAuth: number
  fragmentedNfts: web3.PublicKey[]
}
/**
 * @category Instructions
 * @category Unfrag
 * @category generated
 */
export const unfragStruct = new beet.FixableBeetArgsStruct<
  UnfragInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['bumpAuth', beet.u8],
    ['fragmentedNfts', beet.array(beetSolana.publicKey)],
  ],
  'UnfragInstructionArgs',
)
/**
 * Accounts required by the _unfrag_ instruction
 *
 * @property [_writable_] vault
 * @property [_writable_] wholeNft
 * @property [_writable_] wholeNftThrone
 * @property [_writable_, **signer**] payer
 * @property [] authority
 * @property [] tokenMetadataProgram
 * @category Instructions
 * @category Unfrag
 * @category generated
 */
export type UnfragInstructionAccounts = {
  vault: web3.PublicKey
  wholeNft: web3.PublicKey
  wholeNftThrone: web3.PublicKey
  payer: web3.PublicKey
  authority: web3.PublicKey
  tokenProgram?: web3.PublicKey
  tokenMetadataProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
  rent?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const unfragInstructionDiscriminator = [177, 117, 133, 47, 115, 51, 161, 162]

/**
 * Creates a _Unfrag_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Unfrag
 * @category generated
 */
export function createUnfragInstruction(
  accounts: UnfragInstructionAccounts,
  args: UnfragInstructionArgs,
  programId = new web3.PublicKey('FRAGFu59MRwy5KeEMnbzsUPa2JkwLVsaP7WbhF2r2Yh'),
) {
  const [data] = unfragStruct.serialize({
    instructionDiscriminator: unfragInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.vault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.wholeNft,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.wholeNftThrone,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenMetadataProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
