/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * @category Instructions
 * @category Fragment
 * @category generated
 */
export type FragmentInstructionArgs = {
  parts: number
  fragmentedNfts: web3.PublicKey[]
}
/**
 * @category Instructions
 * @category Fragment
 * @category generated
 */
export const fragmentStruct = new beet.FixableBeetArgsStruct<
  FragmentInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['parts', beet.u8],
    ['fragmentedNfts', beet.array(beetSolana.publicKey)],
  ],
  'FragmentInstructionArgs'
)
/**
 * Accounts required by the _fragment_ instruction
 *
 * @property [_writable_] wholeNft
 * @property [_writable_, **signer**] payer
 * @property [_writable_] mintSource
 * @property [] mint
 * @property [] fragmentedMints
 * @property [**signer**] fragmenter
 * @category Instructions
 * @category Fragment
 * @category generated
 */
export type FragmentInstructionAccounts = {
  wholeNft: web3.PublicKey
  payer: web3.PublicKey
  mintSource: web3.PublicKey
  mint: web3.PublicKey
  fragmentedMints: web3.PublicKey
  fragmenter: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const fragmentInstructionDiscriminator = [
  25, 28, 9, 210, 74, 147, 62, 222,
]

/**
 * Creates a _Fragment_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Fragment
 * @category generated
 */
export function createFragmentInstruction(
  accounts: FragmentInstructionAccounts,
  args: FragmentInstructionArgs,
  programId = new web3.PublicKey('6jZDraLYUeT7Gau1Y4CEf8GPdbquacMEDJ6nZKYX6Q4m')
) {
  const [data] = fragmentStruct.serialize({
    instructionDiscriminator: fragmentInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.wholeNft,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.mintSource,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.fragmentedMints,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.fragmenter,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
